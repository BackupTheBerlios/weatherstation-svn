<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
	Ant build file for the documentation tutorial code
	Writer of a chapter with an example have to include a foroward
	to their build file.  This latest build file suppose arguments 
	sets here :
		src.dir   : Directory where the source are : ./src
		build.dir : Base directory where to store generated files
		classpath : Classpath used to make any compilation 
	
  -->

<project name="weatherstations" default="all" basedir=".">
	<!-- Load user property definition overrides -->
	<property file="build.properties"/>
	<property file="${user.home}/build.properties"/>

    <property environment="env" />
    <property name="src.dir" value="${basedir}/src"/>
    <property name="src.resources" value="${basedir}/resources"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="properties.dir" value="${basedir}/properties"/>
    <property name="lib.dir" value="${basedir}/lib"/>
	<!--  ==================== Compilation Control Options ==================== -->
	<!--
	  These properties control option settings on the Javac compiler when it
	  is invoked using the <javac> task.

	  compile.debug        Should compilation include the debug option?
	  compile.deprecation  Should compilation include the deprecation option?
	  compile.optimize     Should compilation include the optimize option?
	-->
	<property name="compile.debug"       value="true"/>
	<property name="compile.deprecation" value="false"/>
	<property name="compile.optimize"    value="true"/>


	<!-- ==================== External Dependencies =========================== -->
	<!--<property name="some.jar" value="(set this in build.properties!)"/>-->

	<!-- ==================== Compilation Classpath =========================== -->
	<!--
	  Rather than relying on the CLASSPATH environment variable, Ant includes
	  features that makes it easy to dynamically construct the classpath you
	  need for each compilation.  The example below constructs the compile
	  classpath to include the servlet.jar file, as well as the other
	  components that Tomcat makes available to web applications automatically,
	  plus anything that you explicitly added.
	-->
	<path id="weatherstations.classpath">
		<!--<pathelement location="${some.jar}"/>-->
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
	</path>

    <!-- Clean build and dist -->
    <target name="clean">
    	<delete dir="${build.dir}"/>
    	<delete dir="${dist.dir}"/>
    </target>

	<!-- No default Target -->
    <target name="all" depends="jar,jar-core">
    </target>
    
	<!-- Target to create files to store on the Web site -->
    <target name="dist" depends="compile">
    	<mkdir dir="${dist.dir}"/>
    	<!-- Bundle all the sources and build script in one file -->
    	<zip zipfile="${dist.dir}/weatherstations_api.zip" basedir="${src.dir}" includes="org/**">
			<fileset dir="${basedir}" includes="LICENSE"/>   
			<fileset dir="${basedir}" includes="build.xml"/>   
			<fileset dir="${basedir}" includes="**/lib/**"/>   
		</zip>
    </target>
    
	<!-- Target to create channel archive -->
    <target name="jar" depends="compile">
		<mkdir dir="${dist.dir}"/>
    	<jar destfile="${dist.dir}/${app.name}-${app.version}.jar">
			<fileset dir="${build.dir}/classes"/>
			<fileset dir="${basedir}" includes="LICENSE"/>
			<manifest>
				<attribute name="Built-By" value="Idan Sofer"/>
			</manifest>
		</jar>
    </target>
    
    <target name="jar-core" depends="compile-core">
		<mkdir dir="${dist.dir}"/>
    	<jar destfile="${dist.dir}/${app.name}-core-${app.version}.jar">
			<fileset dir="${build.dir}/classes" includes="org/idanso/weatherstation/*.class" />
			<fileset dir="${basedir}" includes="LICENSE"/>
			<manifest>
				<attribute name="Built-By" value="Idan Sofer"/>
			</manifest>			
		</jar>
    </target>


    <target name="gcjlib-extra" depends="compile"
        description="Create native libraries for use with gcj" >
    	<mkdir dir="${build.dir}/.libs"/>
      	<taskdef name="gcjlib" classname="org.spindazzle.ant.taskdefs.GcjLib" />
	 <gcjlib name="build/.libs/libweatherstation-extra-java">
	    <classpath location="${build.dir}/classes:lib/*" />
	     <fileset dir="${build.dir}/classes"
	     includes="org/idanso/weatherstation/http/*.class,org/idanso/weatherstation/metar/*.class"
	     />
	 </gcjlib>					     
     </target>
     
    <target name="gcjlib-core" depends="compile-core"
        description="Create native libraries for use with gcj" >
    	<mkdir dir="${build.dir}/.libs"/>
      	<taskdef name="gcjlib" classname="org.spindazzle.ant.taskdefs.GcjLib" />
	 <gcjlib name="build/.libs/libweatherstation-java">
	    <classpath location="{$lib.dir}">
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<dirset dir="{$build.dir}/classes" />
	    </classpath>
	     <fileset dir="${build.dir}/classes"
	     includes="org/idanso/weatherstation/*.class"
	     />
	     <fileset dir="${lib.dir}" includes="*.jar" />
	 </gcjlib>					     
     </target>
					       

    <target name="compile-core">
        <mkdir dir="${build.dir}/classes"/>
		<javac srcdir="${src.dir}"
			  destdir="${build.dir}/classes"
			  includes="org/idanso/weatherstation/*.java"
				debug="${compile.debug}"
		  deprecation="${compile.deprecation}"
			 optimize="${compile.optimize}">
        <classpath refid="weatherstations.classpath"/>
        </javac>
    </target>

    <target name="compile" depends="compile-core">
        <mkdir dir="${build.dir}/classes"/>
		<javac srcdir="${src.dir}"
			  destdir="${build.dir}/classes"
			  excludes="org/idanso/weatherstation/*.java"
				debug="${compile.debug}"
		  deprecation="${compile.deprecation}"
			 optimize="${compile.optimize}">
        <classpath refid="weatherstations.classpath"/>
        </javac>
    </target>


    <target name="javadoc" depends="compile"
            description="Create Javadoc API documentation">

        <mkdir dir="${dist.dir}/docs/api"/>
        <javadoc sourcepath="src"
               classpathref="weatherstations.classpath"
                    destdir="${dist.dir}/docs/api"
               packagenames="org.idanso.weatherstation.*"
                     access="public"
                     author="true"
                    version="true"
                windowtitle="${app.name} ${app.version} API Documentation">
      <doctitle><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></doctitle>
      <header><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></header>
    </javadoc>

  </target>

	<!-- Add a new target here -->
	
</project>
